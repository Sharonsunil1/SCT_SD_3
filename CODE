import tkinter as tk
from tkinter import messagebox

class SudokuSolver:
    def __init__(self, master):
        self.master = master
        master.title("Sudoku Solver")

        self.board = [[0]*9 for _ in range(9)]

        self.entries = [[None]*9 for _ in range(9)]
        for i in range(9):
            for j in range(9):
                self.entries[i][j] = tk.Entry(master, width=3, font=('Arial', 18), justify='center')
                self.entries[i][j].grid(row=i, column=j)

        self.solve_button = tk.Button(master, text="Solve", command=self.solve_sudoku)
        self.solve_button.grid(row=9, column=3, columnspan=3)

        self.reset_button = tk.Button(master, text="Reset", command=self.reset_board)
        self.reset_button.grid(row=10, column=3, columnspan=3)

    def reset_board(self):
        for i in range(9):
            for j in range(9):
                self.entries[i][j].delete(0, tk.END)
        self.board = [[0]*9 for _ in range(9)]

    def solve_sudoku(self):
        self.read_board()
        if self.solve():
            self.display_board()
        else:
            messagebox.showerror("Error", "No solution exists for the given Sudoku puzzle")

    def read_board(self):
        for i in range(9):
            for j in range(9):
                val = self.entries[i][j].get()
                if val.isdigit():
                    self.board[i][j] = int(val)
                else:
                    self.board[i][j] = 0

    def display_board(self):
        for i in range(9):
            for j in range(9):
                self.entries[i][j].delete(0, tk.END)
                self.entries[i][j].insert(0, str(self.board[i][j]))

    def is_valid(self, num, pos):
        row, col = pos
        for i in range(9):
            if self.board[row][i] == num and col != i:
                return False
            if self.board[i][col] == num and row != i:
                return False

        box_x = col // 3
        box_y = row // 3
        for i in range(box_y*3, box_y*3 + 3):
            for j in range(box_x*3, box_x*3 + 3):
                if self.board[i][j] == num and (i, j) != pos:
                    return False
        return True

    def find_empty(self):
        for i in range(9):
            for j in range(9):
                if self.board[i][j] == 0:
                    return (i, j)
        return None

    def solve(self):
        find = self.find_empty()
        if not find:
            return True
        else:
            row, col = find

        for i in range(1, 10):
            if self.is_valid(i, (row, col)):
                self.board[row][col] = i

                if self.solve():
                    return True

                self.board[row][col] = 0

        return False

if __name__ == "__main__":
    root = tk.Tk()
    game = SudokuSolver(root)
    root.mainloop()
